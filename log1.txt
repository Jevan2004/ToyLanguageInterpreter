Program State id:2Execution Stack: MyStack contains Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt;new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt
Ref(int) v1

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt
Ref(int) v1

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt
Ref(int) v2

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt
Ref(int) v2

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt
Ref(int) v3

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt
Ref(int) v3

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))
new(v1,2)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))
new(v1,2)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))
new(v2,3)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))
new(v2,3)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))
new(v3,4)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))
new(v3,4)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v1);print(rH(v1)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v1);print(rH(v1)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains Await(cnt);wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains Await(cnt);wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains Await(cnt);wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains Await(cnt);wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))
wH(v1)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))
wH(v1)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20
300

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt;new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt
Ref(int) v1

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt
Ref(int) v1

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt
Ref(int) v2

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt
Ref(int) v2

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt
Ref(int) v3

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt
Ref(int) v3

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))
new(v1,2)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))
new(v1,2)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))
new(v2,3)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))
new(v2,3)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))
new(v3,4)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))
new(v3,4)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v1);print(rH(v1)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v1);print(rH(v1)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains Await(cnt);wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains Await(cnt);wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains Await(cnt);wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains Await(cnt);wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt;new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt
Ref(int) v1

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt
Ref(int) v1

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt
Ref(int) v2

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt
Ref(int) v2

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt
Ref(int) v3

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt
Ref(int) v3

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))
new(v1,2)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))
new(v1,2)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))
new(v2,3)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))
new(v2,3)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))
new(v3,4)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))
new(v3,4)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v1);print(rH(v1)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v1);print(rH(v1)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains Await(cnt);wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains Await(cnt);wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains Await(cnt);wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains Await(cnt);wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))
wH(v1)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))
wH(v1)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20
300

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt;new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt
Ref(int) v1

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt
Ref(int) v1

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt
Ref(int) v2

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt
Ref(int) v2

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt
Ref(int) v3

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt
Ref(int) v3

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))
new(v1,2)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))
new(v1,2)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))
new(v2,3)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))
new(v2,3)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))
new(v3,4)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))
new(v3,4)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v1);print(rH(v1)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v1);print(rH(v1)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains Await(cnt);wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains Await(cnt);wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains Await(cnt);wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains Await(cnt);wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))
wH(v1)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))
wH(v1)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20
300

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt;new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt
Ref(int) v1

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt
Ref(int) v1

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt
Ref(int) v2

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt
Ref(int) v2

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt
Ref(int) v3

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt
Ref(int) v3

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))
new(v1,2)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))
new(v1,2)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))
new(v2,3)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))
new(v2,3)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))
new(v3,4)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))
new(v3,4)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v1);print(rH(v1)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v1);print(rH(v1)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains Await(cnt);wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains Await(cnt);wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains Await(cnt);wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains Await(cnt);wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))
wH(v1)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))
wH(v1)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20
300

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt;new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt
Ref(int) v1

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt
Ref(int) v1

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt
Ref(int) v2

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt
Ref(int) v2

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt
Ref(int) v3

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt
Ref(int) v3

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))
new(v1,2)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))
new(v1,2)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))
new(v2,3)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))
new(v2,3)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))
new(v3,4)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))
new(v3,4)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v1);print(rH(v1)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v1);print(rH(v1)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains Await(cnt);wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains Await(cnt);wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains Await(cnt);wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains Await(cnt);wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))
wH(v1)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))
wH(v1)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20
300

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:5Execution Stack: MyStack contains int v;int x;int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains int x;int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
int v

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains int x;int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
int v

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains int x;int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains int x;int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
int x

Symbol Table: MyDictionary contains v -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
int x

Symbol Table: MyDictionary contains v -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 0
x -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 0
x -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
int y

Symbol Table: MyDictionary contains v -> 0
x -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
int y

Symbol Table: MyDictionary contains v -> 0
x -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
v = 0

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
v = 0

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3)

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3)

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
fork(print(v);v = v SUBTRACT 1);v = v ADD 1;while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
fork(print(v);v = v SUBTRACT 1);v = v ADD 1;while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
fork(print(v);v = v SUBTRACT 1);v = v ADD 1

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
fork(print(v);v = v SUBTRACT 1);v = v ADD 1

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1
fork(print(v);v = v SUBTRACT 1)

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1
fork(print(v);v = v SUBTRACT 1)

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains print(v);v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains print(v);v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}

Symbol Table: MyDictionary contains v -> 1
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains v = v SUBTRACT 1
print(v)

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}

Symbol Table: MyDictionary contains v -> 1
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains v = v SUBTRACT 1
print(v)

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
fork(print(v);v = v SUBTRACT 1);v = v ADD 1

Symbol Table: MyDictionary contains v -> 1
x -> 0
y -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
fork(print(v);v = v SUBTRACT 1);v = v ADD 1

Symbol Table: MyDictionary contains v -> 1
x -> 0
y -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1
fork(print(v);v = v SUBTRACT 1)

Symbol Table: MyDictionary contains v -> 1
x -> 0
y -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> -1

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1
fork(print(v);v = v SUBTRACT 1)

Symbol Table: MyDictionary contains v -> 1
x -> 0
y -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1

Symbol Table: MyDictionary contains v -> 1
x -> 0
y -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:7Execution Stack: MyStack contains print(v);v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 1

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1

Symbol Table: MyDictionary contains v -> 1
x -> 0
y -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:7Execution Stack: MyStack contains print(v);v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 1

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}

Symbol Table: MyDictionary contains v -> 2
x -> 0
y -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:7Execution Stack: MyStack contains v = v SUBTRACT 1
print(v)

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 1

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}

Symbol Table: MyDictionary contains v -> 2
x -> 0
y -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:7Execution Stack: MyStack contains v = v SUBTRACT 1
print(v)

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 1

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
fork(print(v);v = v SUBTRACT 1);v = v ADD 1

Symbol Table: MyDictionary contains v -> 2
x -> 0
y -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:7Execution Stack: MyStack contains v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 1

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
fork(print(v);v = v SUBTRACT 1);v = v ADD 1

Symbol Table: MyDictionary contains v -> 2
x -> 0
y -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:7Execution Stack: MyStack contains v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 1

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1
fork(print(v);v = v SUBTRACT 1)

Symbol Table: MyDictionary contains v -> 2
x -> 0
y -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:7Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1
fork(print(v);v = v SUBTRACT 1)

Symbol Table: MyDictionary contains v -> 2
x -> 0
y -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1

Symbol Table: MyDictionary contains v -> 2
x -> 0
y -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:8Execution Stack: MyStack contains print(v);v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 2

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1

Symbol Table: MyDictionary contains v -> 2
x -> 0
y -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:8Execution Stack: MyStack contains print(v);v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 2

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}

Symbol Table: MyDictionary contains v -> 3
x -> 0
y -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:8Execution Stack: MyStack contains v = v SUBTRACT 1
print(v)

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 2

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}

Symbol Table: MyDictionary contains v -> 3
x -> 0
y -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:8Execution Stack: MyStack contains v = v SUBTRACT 1
print(v)

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 2

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 0
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:8Execution Stack: MyStack contains v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 2

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 0
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:8Execution Stack: MyStack contains v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 2

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
x = 1

Symbol Table: MyDictionary contains v -> 3
x -> 0
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:8Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 1

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
x = 1

Symbol Table: MyDictionary contains v -> 3
x -> 0
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains y = 3;NopStatement;print(v MULTIPLY 10)
NopStatement

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains y = 3;NopStatement;print(v MULTIPLY 10)
NopStatement

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains NopStatement;print(v MULTIPLY 10)
y = 3

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains NopStatement;print(v MULTIPLY 10)
y = 3

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 3

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 3

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains print(v MULTIPLY 10)
NopStatement

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 3

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains print(v MULTIPLY 10)
NopStatement

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 3

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 3

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 3

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 3

Output: MyList contains 0
1
2
30

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt;new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt
Ref(int) v1

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt
Ref(int) v1

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt
Ref(int) v2

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt
Ref(int) v2

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt
Ref(int) v3

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt
Ref(int) v3

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))
new(v1,2)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))
new(v1,2)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))
new(v2,3)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))
new(v2,3)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))
new(v3,4)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))
new(v3,4)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v1);print(rH(v1)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v1);print(rH(v1)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains Await(cnt);wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains Await(cnt);wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains Await(cnt);wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains Await(cnt);wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))
wH(v1)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))
wH(v1)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20
300

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt;new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt
Ref(int) v1

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt
Ref(int) v1

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt
Ref(int) v2

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt
Ref(int) v2

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt
Ref(int) v3

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt
Ref(int) v3

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))
new(v1,2)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))
new(v1,2)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))
new(v2,3)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))
new(v2,3)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))
new(v3,4)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))
new(v3,4)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v1);print(rH(v1)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v1);print(rH(v1)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains Await(cnt);wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains Await(cnt);wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains Await(cnt);wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains Await(cnt);wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))
wH(v1)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))
wH(v1)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20
300

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:5Execution Stack: MyStack contains int v;int x;int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains int x;int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
int v

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains int x;int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
int v

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains int x;int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains int x;int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
int x

Symbol Table: MyDictionary contains v -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
int x

Symbol Table: MyDictionary contains v -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 0
x -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 0
x -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
int y

Symbol Table: MyDictionary contains v -> 0
x -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
int y

Symbol Table: MyDictionary contains v -> 0
x -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
v = 0

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
v = 0

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3)

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3)

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
fork(print(v);v = v SUBTRACT 1);v = v ADD 1;while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
fork(print(v);v = v SUBTRACT 1);v = v ADD 1;while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
fork(print(v);v = v SUBTRACT 1);v = v ADD 1

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
fork(print(v);v = v SUBTRACT 1);v = v ADD 1

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1
fork(print(v);v = v SUBTRACT 1)

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1
fork(print(v);v = v SUBTRACT 1)

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains print(v);v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains print(v);v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}

Symbol Table: MyDictionary contains v -> 1
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains v = v SUBTRACT 1
print(v)

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}

Symbol Table: MyDictionary contains v -> 1
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains v = v SUBTRACT 1
print(v)

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
fork(print(v);v = v SUBTRACT 1);v = v ADD 1

Symbol Table: MyDictionary contains v -> 1
x -> 0
y -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
fork(print(v);v = v SUBTRACT 1);v = v ADD 1

Symbol Table: MyDictionary contains v -> 1
x -> 0
y -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1
fork(print(v);v = v SUBTRACT 1)

Symbol Table: MyDictionary contains v -> 1
x -> 0
y -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> -1

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1
fork(print(v);v = v SUBTRACT 1)

Symbol Table: MyDictionary contains v -> 1
x -> 0
y -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1

Symbol Table: MyDictionary contains v -> 1
x -> 0
y -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:7Execution Stack: MyStack contains print(v);v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 1

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1

Symbol Table: MyDictionary contains v -> 1
x -> 0
y -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:7Execution Stack: MyStack contains print(v);v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 1

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}

Symbol Table: MyDictionary contains v -> 2
x -> 0
y -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:7Execution Stack: MyStack contains v = v SUBTRACT 1
print(v)

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 1

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}

Symbol Table: MyDictionary contains v -> 2
x -> 0
y -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:7Execution Stack: MyStack contains v = v SUBTRACT 1
print(v)

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 1

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
fork(print(v);v = v SUBTRACT 1);v = v ADD 1

Symbol Table: MyDictionary contains v -> 2
x -> 0
y -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:7Execution Stack: MyStack contains v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 1

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
fork(print(v);v = v SUBTRACT 1);v = v ADD 1

Symbol Table: MyDictionary contains v -> 2
x -> 0
y -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:7Execution Stack: MyStack contains v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 1

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1
fork(print(v);v = v SUBTRACT 1)

Symbol Table: MyDictionary contains v -> 2
x -> 0
y -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:7Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1
fork(print(v);v = v SUBTRACT 1)

Symbol Table: MyDictionary contains v -> 2
x -> 0
y -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1

Symbol Table: MyDictionary contains v -> 2
x -> 0
y -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:8Execution Stack: MyStack contains print(v);v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 2

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1

Symbol Table: MyDictionary contains v -> 2
x -> 0
y -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:8Execution Stack: MyStack contains print(v);v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 2

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}

Symbol Table: MyDictionary contains v -> 3
x -> 0
y -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:8Execution Stack: MyStack contains v = v SUBTRACT 1
print(v)

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 2

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}

Symbol Table: MyDictionary contains v -> 3
x -> 0
y -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:8Execution Stack: MyStack contains v = v SUBTRACT 1
print(v)

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 2

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 0
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:8Execution Stack: MyStack contains v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 2

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 0
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:8Execution Stack: MyStack contains v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 2

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
x = 1

Symbol Table: MyDictionary contains v -> 3
x -> 0
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:8Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 1

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
x = 1

Symbol Table: MyDictionary contains v -> 3
x -> 0
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains y = 3;NopStatement;print(v MULTIPLY 10)
NopStatement

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains y = 3;NopStatement;print(v MULTIPLY 10)
NopStatement

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains NopStatement;print(v MULTIPLY 10)
y = 3

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains NopStatement;print(v MULTIPLY 10)
y = 3

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 3

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 3

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains print(v MULTIPLY 10)
NopStatement

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 3

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains print(v MULTIPLY 10)
NopStatement

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 3

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 3

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 3

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 3

Output: MyList contains 0
1
2
30

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains int v;int x;int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains int x;int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
int v

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains int x;int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
int v

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains int x;int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains int x;int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
int x

Symbol Table: MyDictionary contains v -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
int x

Symbol Table: MyDictionary contains v -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 0
x -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains int y;v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 0
x -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
int y

Symbol Table: MyDictionary contains v -> 0
x -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
int y

Symbol Table: MyDictionary contains v -> 0
x -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains v = 0;repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
v = 0

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
v = 0

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3);x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3)

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
repeat(fork(print(v);v = v SUBTRACT 1);v = v ADD 1)until(v EQUAL 3)

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
fork(print(v);v = v SUBTRACT 1);v = v ADD 1;while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
fork(print(v);v = v SUBTRACT 1);v = v ADD 1;while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
fork(print(v);v = v SUBTRACT 1);v = v ADD 1

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
fork(print(v);v = v SUBTRACT 1);v = v ADD 1

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1
fork(print(v);v = v SUBTRACT 1)

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1
fork(print(v);v = v SUBTRACT 1)

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(v);v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1

Symbol Table: MyDictionary contains v -> 0
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(v);v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}

Symbol Table: MyDictionary contains v -> 1
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:3Execution Stack: MyStack contains v = v SUBTRACT 1
print(v)

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}

Symbol Table: MyDictionary contains v -> 1
x -> 0
y -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:3Execution Stack: MyStack contains v = v SUBTRACT 1
print(v)

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 0

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
fork(print(v);v = v SUBTRACT 1);v = v ADD 1

Symbol Table: MyDictionary contains v -> 1
x -> 0
y -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:3Execution Stack: MyStack contains v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
fork(print(v);v = v SUBTRACT 1);v = v ADD 1

Symbol Table: MyDictionary contains v -> 1
x -> 0
y -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:3Execution Stack: MyStack contains v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1
fork(print(v);v = v SUBTRACT 1)

Symbol Table: MyDictionary contains v -> 1
x -> 0
y -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:3Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> -1

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1
fork(print(v);v = v SUBTRACT 1)

Symbol Table: MyDictionary contains v -> 1
x -> 0
y -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1

Symbol Table: MyDictionary contains v -> 1
x -> 0
y -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(v);v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 1

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1

Symbol Table: MyDictionary contains v -> 1
x -> 0
y -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(v);v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 1

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}

Symbol Table: MyDictionary contains v -> 2
x -> 0
y -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:4Execution Stack: MyStack contains v = v SUBTRACT 1
print(v)

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 1

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}

Symbol Table: MyDictionary contains v -> 2
x -> 0
y -> 0

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:4Execution Stack: MyStack contains v = v SUBTRACT 1
print(v)

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 1

Output: MyList contains 0

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
fork(print(v);v = v SUBTRACT 1);v = v ADD 1

Symbol Table: MyDictionary contains v -> 2
x -> 0
y -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:4Execution Stack: MyStack contains v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 1

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
fork(print(v);v = v SUBTRACT 1);v = v ADD 1

Symbol Table: MyDictionary contains v -> 2
x -> 0
y -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:4Execution Stack: MyStack contains v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 1

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1
fork(print(v);v = v SUBTRACT 1)

Symbol Table: MyDictionary contains v -> 2
x -> 0
y -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:4Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1
fork(print(v);v = v SUBTRACT 1)

Symbol Table: MyDictionary contains v -> 2
x -> 0
y -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1

Symbol Table: MyDictionary contains v -> 2
x -> 0
y -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains print(v);v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 2

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}
v = v ADD 1

Symbol Table: MyDictionary contains v -> 2
x -> 0
y -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains print(v);v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 2

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}

Symbol Table: MyDictionary contains v -> 3
x -> 0
y -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains v = v SUBTRACT 1
print(v)

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 2

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
while(!v EQUAL 3){fork(print(v);v = v SUBTRACT 1);v = v ADD 1}

Symbol Table: MyDictionary contains v -> 3
x -> 0
y -> 0

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains v = v SUBTRACT 1
print(v)

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 2

Output: MyList contains 0
1

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 0
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 2

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains x = 1;NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 0
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains v = v SUBTRACT 1

Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 2

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
x = 1

Symbol Table: MyDictionary contains v -> 3
x -> 0
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:5Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains x -> 0
y -> 0
v -> 1

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)
x = 1

Symbol Table: MyDictionary contains v -> 3
x -> 0
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains NopStatement;y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains y = 3;NopStatement;print(v MULTIPLY 10)
NopStatement

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains y = 3;NopStatement;print(v MULTIPLY 10)
NopStatement

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains y = 3;NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains NopStatement;print(v MULTIPLY 10)
y = 3

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains NopStatement;print(v MULTIPLY 10)
y = 3

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 0

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 3

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains NopStatement;print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 3

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(v MULTIPLY 10)
NopStatement

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 3

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(v MULTIPLY 10)
NopStatement

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 3

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 3

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(v MULTIPLY 10)

Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 3

Output: MyList contains 0
1
2

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains v -> 3
x -> 1
y -> 3

Output: MyList contains 0
1
2
30

FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt;new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt
Ref(int) v1

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt
Ref(int) v1

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt
Ref(int) v2

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt
Ref(int) v2

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt
Ref(int) v3

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt
Ref(int) v3

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))
new(v1,2)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))
new(v1,2)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))
new(v2,3)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))
new(v2,3)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))
new(v3,4)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))
new(v3,4)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {}
----------------------------------
Program State id:6Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:6Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:6Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v1);print(rH(v1)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:6Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v1);print(rH(v1)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:6Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:7Execution Stack: MyStack contains Await(cnt);wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:6Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:7Execution Stack: MyStack contains Await(cnt);wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:6Execution Stack: MyStack contains Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:7Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:6Execution Stack: MyStack contains Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:7Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:6Execution Stack: MyStack contains Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7]}
----------------------------------
Program State id:7Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7]}
----------------------------------
Program State id:8Execution Stack: MyStack contains Await(cnt);wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7]}
----------------------------------
Program State id:6Execution Stack: MyStack contains Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7]}
----------------------------------
Program State id:7Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7]}
----------------------------------
Program State id:8Execution Stack: MyStack contains Await(cnt);wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7]}
----------------------------------
Program State id:6Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7]}
----------------------------------
Program State id:7Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7]}
----------------------------------
Program State id:8Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7]}
----------------------------------
Program State id:6Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7]}
----------------------------------
Program State id:7Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7]}
----------------------------------
Program State id:8Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7]}
----------------------------------
Program State id:6Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:7Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:8Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:6Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:7Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:8Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:6Execution Stack: MyStack contains print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:7Execution Stack: MyStack contains wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:8Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:6Execution Stack: MyStack contains print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:7Execution Stack: MyStack contains wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:8Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:6Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:7Execution Stack: MyStack contains print(rH(v1))
wH(v1)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:8Execution Stack: MyStack contains wH(v2);print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:7Execution Stack: MyStack contains print(rH(v1))
wH(v1)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:8Execution Stack: MyStack contains wH(v2);print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:7Execution Stack: MyStack contains print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:8Execution Stack: MyStack contains wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:7Execution Stack: MyStack contains print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:8Execution Stack: MyStack contains wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:7Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:8Execution Stack: MyStack contains print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:8Execution Stack: MyStack contains print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:8Execution Stack: MyStack contains print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:8Execution Stack: MyStack contains print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:8Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20
300

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[7, 6, 8]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt;new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v1;Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt
Ref(int) v1

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt
Ref(int) v1

Symbol Table: MyDictionary contains 
Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v2;Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt
Ref(int) v2

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt
Ref(int) v2

Symbol Table: MyDictionary contains v1 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
Ref(int) v3;int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt
Ref(int) v3

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt
Ref(int) v3

Symbol Table: MyDictionary contains v1 -> int
v2 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
int cnt

Symbol Table: MyDictionary contains v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2));fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v1,2);new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))
new(v1,2)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))
new(v1,2)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v2,3);new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))
new(v2,3)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))
new(v2,3)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
new(v3,4);NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))
new(v3,4)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))
new(v3,4)

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
NewBarrier(cnt,rH(v2))

Symbol Table: MyDictionary contains cnt -> 0
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v1);print(rH(v1)));fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v1);print(rH(v1)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v1);print(rH(v1)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains Await(cnt);wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)));Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains Await(cnt);wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))
fork(Await(cnt);wH(v2);wH(v2);print(rH(v2)))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains Await(cnt);wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains Await(cnt);print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains Await(cnt);wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))
Await(cnt)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains print(rH(v3))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains wH(v1);print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 
FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:2Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))
wH(v1)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))
wH(v1)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 2
2 -> 3
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains print(rH(v1))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains wH(v2);print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:3Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))
wH(v2)

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 30
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains print(rH(v2))

Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
Program State id:4Execution Stack: MyStack contains 
Symbol Table: MyDictionary contains cnt -> 1
v1 -> int
v2 -> int
v3 -> int

Output: MyList contains 4
20
300

FileTable: File Table:

Heap: 1 -> 20
2 -> 300
3 -> 4
BarrierTable: {1=3=[3, 2, 4]}
----------------------------------
